                     +--------------------------+
                     |         ECE 382V         |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Anita J. Woodford <awoodfor@utexas.edu>
David Y. Cho <dychokis@utexas.edu> <dyc325>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.:

1. Introduction to Algorithms (3rd edition) for tacks,threads, and FD for 
    the setup_stack function and for code in syscall.
2. The Design and Analysis of Algorithms - stacks,threads, and FD for the 
    setup_stack function and for code in syscall.
3. CSE 251 BYUI Class material on Stacks,threads, and FD for the setup_stack 
   function and for code in syscall. 
4. Pintos documentation and lecture notes for project implementations.
5. Yerraballi, Ramesh. (2023, Feb 10). Pintos Userprog Miscellania [Video].
    YouTube. https://www.youtube.com/watch?v=2QfVTF2C-No
6. Bharath Venkatakrishnan - Consulted with regarding semaphore and thread process. 

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
1. args_struct - 
    struct args_struct {
        char * file_name; // stores the executable name 
        char * file_args; // stores teh command line arguments.
    }
    Purpose: To pass a file name and arguments as a single structure to start_process
2. 

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We parsed the command line using strtok_r(), which tokenizes the input string.
Afterwards, we separated the file_name and file's arguments and passed them both
to start_process() via thread_create(), load(), and setup_stack().  
The arguments is then further tokenized to initialize argv[].
The elements of argv[] are pushed back onto the stack in reverse order because the
stack grows downwards. We ensure stack alignment to 4 bytes by adding padding
if necessary. We use a maximum of 128 arguments (argv[128]) to prevent stack 
overflows. 
To avoid stack overflow we limited the number of arguments to fit within a single 
page (4kb)and we check the remaining stack space while pushing arguments. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Pintos implements strtok_r because is is a reentrant version of strtok 
which is safer for a multithreaded environment. Strtok uses a shared internal 
state making it unsafe to use multiple threads or processes concurrently. 

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Changes in struct thread: 
fd_table, sema_wait, sema_exit, exitStatus, children, and exec_File.
Purpose: Handle file descriptors, synchronization and parent child process relationships. 
struct fdtable: Tracks open file descriptors within a process, isolating usage between processes. 
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors should be unique within each process. They start from 2, 
as 0 and 1 are reserved for stdin_fileno and stdout_fileno. Each process will 
have its own file descriptor table, preventing conflicts between processes. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
At the moment we are using get_user and put_user functions to safely
read and write to user memory. These functions use inline assembly along
with exception handling to identify and manage invalid memory access. This
process helps to prevent kernel crashes. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
1. Full Page Copy (4096):
    - Minimum: 1 call to pagedir_get_page.
    - Maximum: 4096 calls if copying byte by byte across pages.
2. 2-Byte Copy: 
    - Minimum: 1 call .  
    - Maximum: 2 calls if byte span page boundaries. 
3. Optimization: 
    - Batch validation reduces overhead for large memory regions. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
The wait function uses our exiting semaphore for synchronization. The 
parent process will block this semaphore until the child process calls
sema_up in the process exit function. This will ensure that the  parent 
waits for the child to terminate and allows the parent to 
retrieve the childs exit status. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
Centralized validation using validate_user_pointer.
sys_exit terminates processes immediately on invalid pointers. 

Good documentation practices (e.g., adding comments) to make clear 
where the primary function of the code helps with avoiding obscuring
it with other error handling code. Future work is needed for freeing
allocated resources.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
Parent waits on sema_wait for the child to signal load completion. 
The child sets load_success to indicate status. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

1. Before Child Exits:
    - Parent blocks on sema_wait
2. After Child Exits:
    - Parent retrieves exit status and signals sema_exit. 
3. Parent Terminates: 
    - Child checks parent state during termination and cleans resources.
4. Special Cases: 
    - Double wait calls return -1. 

To use wait() we employ the exiting semaphore to synchronized the parent and child
process. If the parent calls wait() before the child exits, it blocks the semaphore.
Same if the child exits first, it signals the semaphore allowing the parent to proceed.
All resources are freed, which prevents a memory leak and ensures consistent behavior. 


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
We selected inline assembly using get user and put user for improved efficiency and 
precise exception handling. This will prevent crashes and allow safe access to user
memory without requiring significant modifications to the kernel.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

1. Advantages: 
    - Process isolated file descriptors prevent interference. 
    - Fixed size reduces complexity.
2. Disadvantages: 
    - Limited scalability due to static size. 
    
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We kept the default mapping for simplicity. If we implement a separate mapping it
will allow more control over process identifiers but would require additional
synchronization and lookup mechanisms. 


                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
